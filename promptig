#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2014 Robert Painsi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Promptig - Customize your prompt including git
# https://github.com/robertwhitebit/promptig

# config

# Color codes are terminal dependent. http://www.arwin.net/tech/bash.php#s_1
# Show or change color palette Edit->Profile Preferences->Colors->Palette
ColorReset='\e[0m'

Black='\e[0;30m'
Red='\e[0;31m'
Green='\e[0;32m'
Yellow='\e[0;33m'
Blue='\e[0;34m'
Magenta='\e[0;35m'
Cyan='\e[0;36m'
White='\e[0;37m'

# Prompt colors
InputColor=${ColorReset}
PromptColor=${Cyan}

# git state colors
NothingToCommitColor=${Green}

ChangesNotStagedColor=${Red}
ChangesToCommitColor=${Red}
MergeConflictsColor=${Red}

CherryPickingColor=${Blue}
RebasingColor=${Blue}
HeadDetachedFromColor=${Blue}

UntrackedFilesColor=${Yellow}

# git state symbols
BranchAheadSymbol='↑'
BranchBehindSymbol='↓'

MergeConflictsSymbol='⚡'

ChangesNotStagedSymbol='*'
UntrackedFilesSymbol='+'

# utils
function gitStatus() {
  printf "$(LANG=en git status --long 2>/dev/null)"
}

function gitStatusShort() {
  printf "$(LANG=en git status --porcelain 2>/dev/null)"
}

function gitModifiedFiles() {
    printf "$(LANG=en git ls-files --modified 2>/dev/null)"
}

function gitUntrackedFiles() {
    printf "$(LANG=en git ls-files --others --exclude-standard 2>/dev/null)"
}

function match() {
  if [[ $1 =~ $2 ]]; then
    return 0
  else
    return 1
  fi
}

function matchGrep() {
  if [[ $(printf "$1" | grep -oE "$2") ]]; then
    return 0
  else
    return 1
  fi
}

function countLines() {
  printf $(printf "$1" | grep -oE "$2" | wc -l)
}

# promptig
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function getGitColor() {
  local GitStatus=$(gitStatus)
  if [[ $GitStatus ]]; then
    if match "$GitStatus" 'You are currently rebasing branch'; then
      printf ${RebasingColor}
    elif match "$GitStatus" 'You are currently cherry-picking commit'; then
      printf ${CherryPickingColor}
    elif match "$GitStatus" 'HEAD detached from'; then
      printf ${HeadDetachedFromColor}

    elif match "$GitStatus" 'nothing to commit'; then
      printf ${NothingToCommitColor}

    elif match "$GitStatus" 'Unmerged paths:'; then
      printf ${MergeConflictsColor}
    elif match "$GitStatus" 'Changes to be committed:'; then
      printf ${ChangesToCommitColor}
    elif match "$GitStatus" 'Changes not staged for commit:'; then
      printf ${ChangesNotStagedColor}
    elif match "$GitStatus" 'Untracked files:'; then
      printf ${UntrackedFilesColor}
    fi
  fi
}

function getGitUnstagedColor() {
  if [[ $(gitModifiedFiles) ]]; then
    printf ${ChangesNotStagedColor}
  else
    printf ${UntrackedFilesColor}
  fi
}

function getGitText() {
  local GitStatus=$(gitStatus)
  if [[ $GitStatus ]]; then
    local GitStatusShort=$(gitStatusShort)

    local BranchName
    if match "${GitStatus}" 'rebase in progress; onto ([^[:space:]]*)'; then
      BranchName=${BASH_REMATCH[1]}
    elif match "${GitStatus}" 'On branch ([^[:space:]]*)'; then
      BranchName=${BASH_REMATCH[1]}
    elif match "${GitStatus}" 'HEAD detached (at|from) ([^[:space:]]*)'; then
      BranchName=${BASH_REMATCH[2]}
    fi

    local CommitsAhead
    local CommitsBehind
    if match "${GitStatus}" 'and have ([0-9]+) and ([0-9]+) different commit'; then
      CommitsAhead=${BranchAheadSymbol}${BASH_REMATCH[1]}
      CommitsBehind=${BranchBehindSymbol}${BASH_REMATCH[2]}
    elif match "${GitStatus}" 'Your branch is behind (of )?.* by ([0-9]+) commit'; then
      CommitsBehind=${BranchBehindSymbol}${BASH_REMATCH[2]}
    elif match "${GitStatus}" 'Your branch is ahead (of )?.* by ([0-9]+) commit'; then
      CommitsAhead=${BranchAheadSymbol}${BASH_REMATCH[2]}
    fi

    local MergeConflicts
    if match "$GitStatus" 'Unmerged paths:'; then
      local MergeConflictsCount=$(countLines "$GitStatusShort" '^(AA|DD|U.|.U)' )
      MergeConflicts="${MergeConflictsSymbol}${MergeConflictsCount}"
    fi

    local BranchState
    if [[ "$CommitsAhead" ]] || [[ "$CommitsBehind" ]] || [[ "$MergeConflicts" ]]; then
      BranchState=" ${MergeConflicts}${CommitsAhead}${CommitsBehind}"
    fi

    printf " [${BranchName}${BranchState}]${CommitState}"
  fi
}

function getGitUnstagedText() {
  if [[ $(gitModifiedFiles) ]]; then
    printf "${ChangesNotStagedSymbol}"
  elif [[ $(gitUntrackedFiles) ]]; then
    printf "${UntrackedFilesSymbol}"
  fi
}

# Always remember to escape colors with \[ and \] (e.g /[${Color}/])
PS1="\[${PromptColor}\]\w\[\$(getGitColor)\]\$(getGitText)\[\$(getGitUnstagedColor)\]\$(getGitUnstagedText)\[${PromptColor}\]$\[${InputColor}\] "
